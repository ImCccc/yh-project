variables:
  # 默认使用项目名作为镜像名称、K8S的部署名称及容器名称
  # KUBE_CONFIG、DOCKER_REPO_HOST、DOCKER_USER、DOCKER_PASS为Gitlab配置的全局变量
  DOCKER_IMAGE_REPO_NAME: ${DOCKER_REPO_HOST}/service-robotics/${CI_PROJECT_NAME}
  #IMAGE_TAG: $(git describe --tags --long) 不配置，用Job生成
  APP_K8S_NAMESPACE: service-robotics
  APP_K8S_DEPLOYMENT: ${CI_PROJECT_NAME}
  APP_K8S_CONTAINER: ${CI_PROJECT_NAME}

# CICD步骤流程
stages:
  - code_test_build
  - docker_ship
  - k8s_deploy

before_script:
  - echo "Start pipelines"

after_script:
  - echo "End of pipelines"

# 代码质量检查
sonarqube_check:
  image:
    name: ${DOCKER_REPO_HOST}/public/sonar-scanner-cli:latest
    entrypoint: ['/bin/sh', '-c cat']
  stage: code_test_build
  tags:
    - kubernetes
  variables:
    SONAR_USER_HOME: '${CI_PROJECT_DIR}/.sonar' # Defines the location of the analysis task cache
    GIT_DEPTH: '0' # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: '${CI_JOB_NAME}'
    paths:
      - .sonar/cache
  script:
    - sonar-scanner -Dsonar.qualitygate.wait=true
  allow_failure: true
  only: &run_rule
    variables:
      - $CI_COMMIT_TAG=~ /^([1-9]\d|\d)(\.([1-9]\d|\d)){2}(\.(pre-a|a|b)([1-9]\d|\d))?$/

# 代码构建、测试
code_ci:
  # 基础镜像包
  image:
    name: ${DOCKER_REPO_HOST}/public/node:latest
    entrypoint: ['/bin/sh', '-c cat']
  stage: code_test_build
  # 指定gitlab-runner的标签
  tags:
    - kubernetes
  # 缓存内容，如公共模块文件
  cache:
    key: '${CI_JOB_NAME}'
    paths:
      - node_modules/
  # 保存项目编译构建的制品，按实际情况替换文件路径
  artifacts:
    paths:
      - dist/
    exclude:
      - dist/temp/**/*
      - dist/*.tmp
    expire_in: 3 days
  script:
    # 替换当前项目的构建步骤
    - echo CI_PROJECT_NAME ${CI_PROJECT_NAME}
    - echo "node 版本是："
    - node -v
    - echo "开始安装依赖..."
    - yarn install
    - echo "开始打包..."
    - export CI=false
    - yarn build
    - echo "编译完成..."
  only: *run_rule

# 自动交付镜像到Harbor仓库，使用docker-git镜像
docker_delivery:
  image:
    name: ${DOCKER_REPO_HOST}/public/docker:latest
    entrypoint: ['/bin/sh', '-c cat']
  stage: docker_ship
  tags:
    - kubernetes
  script:
    # 生成镜像Tag格式、写入当前Git版本信息到镜像构建标签以方便追踪
    - export SCM_ID=$(test ${CI_COMMIT_TAG} && echo ${CI_COMMIT_TAG} || git describe --tags --long)
    - export DOCKER_IMAGE=${DOCKER_IMAGE_REPO_NAME}:${SCM_ID}
    - echo "DOCKER_IMAGE=${DOCKER_IMAGE}" >> imageInfo.env
    - sed -i "3a LABEL gitVersion=${CI_COMMIT_SHORT_SHA}\nLABEL gitBranch=${CI_COMMIT_REF_NAME}\n" Dockerfile
    - echo ${DOCKER_PASS} | docker login -u ${DOCKER_USER} --password-stdin ${DOCKER_IMAGE_REPO_NAME}
    - echo ${DOCKER_IMAGE}
    - docker build -t ${DOCKER_IMAGE} .
    - docker push ${DOCKER_IMAGE}
  artifacts:
    reports:
      # 保存变量供后续步骤使用：DOCKER_IMAGE
      dotenv: imageInfo.env
  dependencies:
    # 获取制品
    - code_ci
  only: *run_rule

# 部署更新K8S项目
k8s_deployment:
  image:
    name: ${DOCKER_REPO_HOST}/public/k8s:latest
    entrypoint: ['/bin/sh', '-c cat']
  stage: k8s_deploy
  tags:
    - kubernetes
  script:
    - echo registry ${DOCKER_IMAGE}
    - mkdir $HOME/.kube && cat $KUBE_CONFIG > $HOME/.kube/config
    - kubectl -n ${APP_K8S_NAMESPACE} set image deployment/${APP_K8S_DEPLOYMENT} ${APP_K8S_CONTAINER}=${DOCKER_IMAGE}
  dependencies:
    - docker_delivery
  only: *run_rule
